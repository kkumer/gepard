
gepard - Package for calculation of DVCS form factors and observables
         by evolving moments of GEneral PARton Distributions 


- Version 0.9.3 2006-12-16 


Contents of this README
-----------------------

1. Basic usage
        1.1 Calculating with Fortran executables
        1.2 Fitting using Minuit
        1.3 Producing example plots used in big paper

2. Compilation and installation
        2.1 Unix requirements
        2.2 Microsoft Windows requirements
        2.3 Compilation targets
        2.4 Installation of Minuit library
                2.4.1 Linux
                2.4.2 Microsoft Windows
        2.5 Installation of PGPLOT library
                2.5.1 Linux
                2.5.2 Microsoft Windows

3. Files, and what they are
        3.1 Documentation
        3.2 Fortran part
        3.3 Mathematica part
                3.3.1 Calculating CFFs in Mathematica


========================================
1. Basic usage
========================================


1.1 Calculating with Fortran executables
----------------------------------------

- First go to directory Tests/ and try to run executable '../src/test' from 
  there, and see if numbers come out right. (By the way, one always needs to 
  have relevant input files, such as GEPARD.INI, in the working directory.)
  Try increasing SPEED in GEPARD.INI and see how numbers get worse.

- For additional tests, see Tests/README

1.2 Fitting using Minuit
------------------------

- Use provided executable '../src/fit', if you can, or create it by 'make fit'.
  It needs to be started from directory fits/ where input files are.
  If you don't have Cygwin and PGPLOT, use '../src/fit_nopgplot' instead!

- Parameters (not for fit ansatz but for everything else) are specified in
  GEPARD.INI which is self-documented.

- To select which experimental data will be used for fit, edit file FIT.INI.
  Only sets between strings 'START' and 'STOP' will be used.

- First line of FIT.INI specifies filename for output. There are usually three
  output files:
    <filename>.min   -  Output of Minuit routines (when in batch mode)
    <filename>.out   -  Final fit results in tabular form
    <filename>.ps    -  Same as .out but in graphical form (This works only
                        if you have PGPLOT library. If not, use executable
                        '../src/fit_nopgplot'.)

- Second line of FIT.INI specifies type of graphical output to <filename>.ps
  (fit_nopgplot ignores this line, but it has to be present)
   *) first comes a string specifying PGPLOT driver:
    '/CPS'  will get output into PS file (landscape)
    '/VCPS'  will get output into PS file (portrait)
    '/XSERVE'   will get output in X window (may not work on MS Windows)
   *) then come two integers specifying number of graphs on
      one physical page: XPANELS x YPANELS

- Commands for driving Minuit and for specifying initial values of
  fitting parameters are in file MINUIT.CMD (see Minuit manual for their exact
  meaning!).


More detailed description can be found in doc/tex/gepard.pdf


1.3 Producing example plots used in big paper
---------------------------------------------

There are many example programs in directory ex/, which produce
numbers which are ploted in Figures of the big paper. These numbers
are in files with names of the form *[0-3].dat, where numbers [0-3] 
correspon to four panels that these figures usually have.

To automatically plot these data using grace plotting software see ex/README.
This ex/README also describes which executable produces which data.


====================================================================
2. Compilation and installation
====================================================================

You need information in this section only if you want to recreate executables
and documentation (ideally, they should be provided in distributed gepard.tgz
in src/ directory).


2.1 Unix requirements
---------------------
-  All executables ('test', 'radcorr', ... and all those in 'ex' subdirectory which
   produce some example data and plots), apart from 'fit' can be compiled using 
   just GNU gcc/g77/f77 compiler

- 'fit' program additionally needs CERNLIB's Minuit routine, usually contained
  in libraries 'kernlib' and 'packlib', distributed by CERN at
      http://cernlib.web.cern.ch/cernlib/
  See section 2.4 for more details about installing Minuit.
  Location of these libraries should be specified as an environment variable
  CERNLIBS in Makefile.

- For plotting feature, 'fit' program also needs PGPLOT graphic library.
      http://www.astro.caltech.edu/~tjp/pgplot/
  Location of this library should be specified as an environment variable
  PGPLOTLIBS in Makefile.
  See section 2.5 for more details about installing PGPLOT.
  If PGPLOT is not available, there is an alternative program fit_nopgplot
  that produces only tabular output.

- For recreating documentation, robodoc and LaTeX softwares are needed.
  Robodoc homepage is  http://www.xs4all.nl/~rfsber/Robo/robodoc.html

Precompiled Minuit and PGPLOT libraries for Linux can be obtained from
me, but if one wants to compile them himself, there are some instructions in 
Sections  2.4 and 2.5  below.

2.2 Microsoft Windows requirements
----------------------------------

Requirements are same as for Unix. I tested this only under cygwin
environment. Cygwin is easy to install: http://www.cygwin.com/
After installing basic setup.exe, and choosing some cygwin packages
server, one needs to choose packages which he wants installed
(by clicking on a small "Skip" icons shown by setup.exe; this wasn't
intuitive for me).
I guess that packages Devel/gcc-core, Devel/gcc-g77 and
Devel/make should be minimally enough but note that a lot of useful 
Unix utilities, editors etc. are available including the whole
of X Window System.


Precompiled Minuit and PGPLOT libraries for Windows can be obtained from
me, but if one wants to compile them himself, there are some instructions in 
Sections  2.4 and 2.5  below.


2.3 Compilation targets
-----------------------

Following make commands should be issued in top gepard/ directory, where
main Makefile is located:

make test  - creates simple executable for testing
make auxtest  - creates simple executable for testing (this tests values
             of \mathcal{H} in two points corresponding to points "A" and "B"
             in notebook lett-num.nb)
make fit   - creates executable for fitting. It needs to be started
             from directory fits/ where input files are.
make fit_nopgplot - creates executable for fitting, but without plotting 
make radcorr - executable for Fig 1 of Letter  (only two points per plot
            by default. Change NPOINTS in radcorr.f for more)
make scaledep - executable for Fig 2 of Letter (also only two points.)
make hmtl  - creates HTML documentation (needs robodoc software)
make pdf   - creates LaTeX documentation (needs robodoc software)
make <example> (where <example> is one of the targets specified
          in file ex/README) - creates example executables in directory 'ex'.
          These than produce numbers for plots shown in big paper. 
make all   - makes everything above and maybe more
make clean - removes everything which is easily recreatable


2.4 Installation of Minuit library
----------------------------------

2.4.1 Linux

For some Linux distributions precompiled binaries are available at
http://cernlib.web.cern.ch/cernlib/. For Debian, there are packages
libpacklib1-dev libkernlib1-dev available in the usual repositories.

2.4.2. Microsoft Windows

One can compile just a Minuit part of packlib from sources available at
http://cernlib.web.cern.ch/cernlib/download/2001_wnt/src/packlib/minuit/code/
Then one additionally needs just INTRAC routine from kernlib. As explained
in Minuit manual, this can be just a simple routine like

      LOGICAL FUNCTION INTRAC ()
      INTRAC = .FALSE.
      RETURN
      END

I haven't succeeded yet in making Minuit work interactively under Windows.
(Works only as a batch job reading command from file MINUIT.CMD)


2.5 Installation of PGPLOT library
----------------------------------

2.5.1 Linux

It's straightforward. Just follow the instructions at
http://www.astro.caltech.edu/~tjp/pgplot/install-unix.html

Dont forget to define shell environment variables, e.g. for
bash/zsh/sh :

export PGPLOT_DIR="${HOME}/local/lib/pgplot/"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:$HOME/local/lib/pgplot"


2.5.2. Microsoft Windows

As with the whole of gepard, only usage inside cygwin environment
is supported. I have successfully compiled PGPLOT with Postscript driver 
/PSDRIV, but not with /XSERVE driver.
For this, I used configuration file shown on top of the WWW page
http://www.astro.caltech.edu/~tjp/pgplot/install-gnuwin.html
This I put into file sys_cygwin/g77_gcc.conf (instead of what's there
by default), and then I followed Unix installation instructions on
http://www.astro.caltech.edu/~tjp/pgplot/install-unix.html.

You may have to define environment variables as in Linux case.



========================================================================
3. Files, and what they are
========================================================================


Makefile - use this if needed to compile Fortran and create documentation.
           See section 2.3 of this README.
GEPARD.INI - file controlling behavior of routines


3.1 Documentation
-----------------

README - this file
doc/tex/gepard.pdf  -  simple manual for gepard
doc/tex/adacf.pdf  -  explanation of routines providing anomalous
 dimensions and Wilson coefficients (from older Mathematica package adacf)
doc/tex/gepard-api.pdf  - extensive description of subroutines
doc/html/masterindex.html - HTML equivalent of gepard-api.pdf


3.2 Fortran part
----------------

src/ - Fortran sources
src/adacf/  - sources for DIS anomalous dimensions and Wilson coeffs.
Tests/  - some numbers from Letter, useful for testing. See README
          there.
fits/ - inputs needed for fitting to DVCS and DIS data
ex/   - files for plotting example plots shown in big paper


3.3 Mathematica part
--------------------

Note that the present version of gepard is considered Fortran-only. Mathematica
packages and notebooks correspond to older version gepard-0.8* (which was
used also for hep-ph/0605237 letter numerics). They are slow and actually not 
needed here but are useful for checking and debugging of Fortran algorithms.
(New Mathematica interface will hopefully be made in the future.)

Test/mma/gepard.m  - Mathematica package. For basic documentation try ?CFF and ?Fcm
Test/mma/gepard_scales.m  - Mathematica package, which, unlike gepard.m, has correct
            treatment of situation where factorization scale is not equal to Q^2.
            However, fast interpolated Wilson coefficients (eval=GEPI, GEPIfix) are
            not available in this package.
Test/mma/gepard.nb - Notebook with checks and timings. Section 1 and then 3 are good
            introduction.  Section 2 of this notebook is good
            for understanding which routines are available and 
            for understanding correspondence with DM's CFFNNLO.nb routines.
Test/mma/gepard.exe - binary FORTRAN library. (Linux and Windows versions)
Test/mma/CFFNNLO_KK.nb - Notebook needed if one wants to recalculate referent
                               results in gepard.nb to which gepard results are compared
Test/mma/gepard_devel.nb - Notebook used for development. Not so easy to follow.


3.3.1 Calculating CFFs in Mathematica

Put gepard.m file and gepard.exe directory where Mathematica can find it, then
install via:

<< gepard.m

Mathematica should automatically load file gepard.exe in subdirectory according
to $SystemID

If this doesn't work ("gepard.exe not found"), then in file gepard.m adjust line 
    Install["gepard.exe"]
to
    Install["<exact path to file gepard.exe for your system>"]

Alternatively, for Linux systems with $SystemID not equal to "Linux" make a link 
   ln -s Linux [$SystemID]

For usage, type ?CFF or better read gepard.nb and DM's CFFNNLO.nb which uses
the same calling conventions for high level functions i.e. only  "eval" label
there should be changed from as2pF(II) to either:

GEP  - exact Fortran routines
GEPI, GEPIfix  - two types of interpolations

Quickest introduction is by going over 1st and 3rd section of gepard.nb, then
returning to 2nd for details and lower level functions if needed, and only then
use ?CFF, ?interpol, ?interpolfix, ?Fpw, ?cDVCS, ?RAope, ?Fcm, ?common, ?AS2P
which are a bit cryptic.

